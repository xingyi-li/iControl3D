// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package completion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompletionServiceClient is the client API for CompletionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompletionServiceClient interface {
	Completion(ctx context.Context, in *Request, opts ...grpc.CallOption) (CompletionService_CompletionClient, error)
}

type completionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompletionServiceClient(cc grpc.ClientConnInterface) CompletionServiceClient {
	return &completionServiceClient{cc}
}

func (c *completionServiceClient) Completion(ctx context.Context, in *Request, opts ...grpc.CallOption) (CompletionService_CompletionClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompletionService_ServiceDesc.Streams[0], "/gooseai.CompletionService/Completion", opts...)
	if err != nil {
		return nil, err
	}
	x := &completionServiceCompletionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompletionService_CompletionClient interface {
	Recv() (*Answer, error)
	grpc.ClientStream
}

type completionServiceCompletionClient struct {
	grpc.ClientStream
}

func (x *completionServiceCompletionClient) Recv() (*Answer, error) {
	m := new(Answer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CompletionServiceServer is the server API for CompletionService service.
// All implementations must embed UnimplementedCompletionServiceServer
// for forward compatibility
type CompletionServiceServer interface {
	Completion(*Request, CompletionService_CompletionServer) error
	mustEmbedUnimplementedCompletionServiceServer()
}

// UnimplementedCompletionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompletionServiceServer struct {
}

func (UnimplementedCompletionServiceServer) Completion(*Request, CompletionService_CompletionServer) error {
	return status.Errorf(codes.Unimplemented, "method Completion not implemented")
}
func (UnimplementedCompletionServiceServer) mustEmbedUnimplementedCompletionServiceServer() {}

// UnsafeCompletionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompletionServiceServer will
// result in compilation errors.
type UnsafeCompletionServiceServer interface {
	mustEmbedUnimplementedCompletionServiceServer()
}

func RegisterCompletionServiceServer(s grpc.ServiceRegistrar, srv CompletionServiceServer) {
	s.RegisterService(&CompletionService_ServiceDesc, srv)
}

func _CompletionService_Completion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompletionServiceServer).Completion(m, &completionServiceCompletionServer{stream})
}

type CompletionService_CompletionServer interface {
	Send(*Answer) error
	grpc.ServerStream
}

type completionServiceCompletionServer struct {
	grpc.ServerStream
}

func (x *completionServiceCompletionServer) Send(m *Answer) error {
	return x.ServerStream.SendMsg(m)
}

// CompletionService_ServiceDesc is the grpc.ServiceDesc for CompletionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompletionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gooseai.CompletionService",
	HandlerType: (*CompletionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Completion",
			Handler:       _CompletionService_Completion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "completion.proto",
}
